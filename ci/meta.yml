meta:
  plan:
    kinit:
      task: kinit
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((docker-awscli-ubuntu.repository))
            tag: ((docker-awscli-ubuntu.version))
        run:
          path: sh
          args:
            - -exc
            - |
              cp -R ssh-credentials ~/.ssh
              ssh -o StrictHostKeyChecking=no concourse@$EDGENODE_HOSTNAME "sudo su - $EDGENODE_USERNAME -c 'kinit -kt /home/$EDGENODE_USERNAME/$EDGENODE_USERNAME.keytab $EDGENODE_USERNAME@DW'"
        inputs:
          - name: ssh-credentials

    deploy-code:
      task: deploy-code
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((docker-awscli-ubuntu.repository))
            tag: ((docker-awscli-ubuntu.version))
        run:
          path: sh
          args:
            - -exc
            - |
              cp -R ssh-credentials ~/.ssh
              scp -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no dataworks-audit-data-ingest/audit_data_ingest.py concourse@$EDGENODE_HOSTNAME:/tmp/
        inputs:
          - name: ssh-credentials
          - name: dataworks-audit-data-ingest

    execute-code:
      task: execute-code
      attempts: 36
      timeout: 20m
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((docker-awscli-ubuntu.repository))
            tag: ((docker-awscli-ubuntu.version))
        run:
          path: sh
          args:
            - -exc
            - |
              cp -R ssh-credentials ~/.ssh
              scp -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no aws-session/credentials concourse@$EDGENODE_HOSTNAME:/tmp/
              scp -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no ssh-credentials/wrapper.sh concourse@$EDGENODE_HOSTNAME:/tmp/
              ssh -o StrictHostKeyChecking=no concourse@$EDGENODE_HOSTNAME "bash +x /tmp/wrapper.sh"
        inputs:
          - name: ssh-credentials
          - name: aws-session
          - name: dataworks-audit-data-ingest

    create-ssh-credentials:
      task: create-ssh-credentials
      attempts: 15
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((docker-awscli.repository))
            version: ((docker-awscli.version))
            tag: ((docker-awscli.version))
        outputs:
          - name: ssh-credentials
        run:
          path: sh
          dir: ssh-credentials
          args:
            - -exc
            - |
              cat <<EOF> id_rsa
              $SSH_PRIVATE_KEY
              EOF
              cat <<EOF> ./config
              Host *
                  User concourse
                  StrictHostKeyChecking no
              EOF
              chmod 400 id_rsa
              cat <<EOF> wrapper.sh
              export HTTPS_PROXY="$PROXY"
              export https_proxy="$PROXY"
              sudo mkdir -p /home/$EDGENODE_USERNAME/.aws/
              sudo cp /tmp/credentials /home/$EDGENODE_USERNAME/.aws/
              sudo chown $EDGENODE_USERNAME:$EDGENODE_USERNAME /home/$EDGENODE_USERNAME/.aws/
              sudo -E su $EDGENODE_USERNAME -c 'python3 /tmp/audit_data_ingest.py \
                  --src-hdfs-dir $SRC_HDFS_DIR \
                  --s3-publish-bucket $S3_BUCKET_ID \
                  --s3-prefix $S3_PREFIX \
                  --hsm-key-id $CLOUDHSM_KEY_ID \
                  --hsm-key-param-name $HSM_KEY_PARAM_NAME \
                  --progress-file /home/$EDGENODE_USERNAME/audit-data-progress.log'
              EOF

    create-aws-credentials:
      task: create-aws-credentials
      attempts: 15
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((docker-awscli.repository))
            version: ((docker-awscli.version))
            tag: ((docker-awscli.version))
        outputs:
          - name: aws-session
        run:
          path: sh
          dir: aws-session
          args:
            - -exc
            - |
              export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
              export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
              export AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION

              # obtain some form of AWS creds, lay down to file
              export AWS_ROLE_ARN=arn:aws:iam::$AWS_ACCOUNT:role/AuditDataIngest
              source /assume-role

              cat <<EOF> credentials
              [default]
              aws_access_key_id = $AWS_ACCESS_KEY_ID
              aws_secret_access_key = $AWS_SECRET_ACCESS_KEY
              aws_session_token = $AWS_SESSION_TOKEN

              EOF

              unset AWS_ROLE_ARN
              unset AWS_ACCESS_KEY_ID
              unset AWS_SECRET_ACCESS_KEY
              unset AWS_SESSION_TOKEN

#              export AWS_ROLE_ARN=arn:aws:iam::$ACCOUNT:role/ucrs_kms_decrypt
#              source /assume-role
#
#              cat <<EOF>> aws-session/credentials
#              [decrypt]
#              aws_access_key_id = $AWS_ACCESS_KEY_ID
#              aws_secret_access_key = $AWS_SECRET_ACCESS_KEY
#              aws_session_token = $AWS_SESSION_TOKEN
#
#              EOF
